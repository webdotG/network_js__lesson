//функция с искуственной задержкой
const delay = (timeMs) => {
  return new Promise ( resolve => setTimeout( () => resolve(), timeMs))
}
//delay(1000).then( () => { console.log('искуственная задержка отработала')})

//задача я хочу сделать асинхронный запрос на сервер и получить какие-то данные
//и сделать искусственную задержку что бы построить цепочку из промисов
  //создаю фэйковый адрес для получения данных с сервера
  //в фнкцию fetchtodos вставляю искусственную задержку
  //с помощью метода then говорю что когда задержка будет пройдена 
  //надо сделать запрос на сервер при помощи функции встроенной в браузер fetch
  //fetc возвращает промис через метод then получаб некий ответ-response
  //у обьекта-ответа с сервера response вызываю метод json для получения json-объекта

const testUrl = 'https://jsonplaceholder.typicode.com/todos'

function fetchTodos () {
  console.log('fetchTodos начала отрабатывать и ждёт данных с сервера после искуственной задержки')
  return delay(3000).then( () => {        //возвращаю весь промис из fetchtodos полученный с сервера          
    //fetch(testUrl).then( response => response.json()); можно щаписать красивее
    return fetch(testUrl)                 //возвращаю промис полученный методом fetch
  }).then( response => response.json())  //вызываю then и начинаю парсит response-ответ 
}

//теперь я могу вызвать функцию fetchTodos без параметров так как она вернула промис
  //я обращаюсь к ней через метод then и получаю какие-то данные-data
  //через метод catch буду отлавливать потенуиальные ошибки и выводить в кносоль

fetchTodos ()
  .then(data => {
    console.log('fetchTodos отработал после искуственной задержки данные с сервера получены, Data: ', data);
  })
  .catch(err => {console.log('отловил ошибку:', err)})  

//===============================================================================================

//функция с async работает только с асинхронными функциями
  //если внутри функции я использую опператор await благодаря которому жду выполнения неоторых промисов
  //обязательно перед функцинй дописать поле async что бы работать с асинхронными функциями
  //виесто опператора then я дописываю await перед delay и это равносильно обработке промиса 
  //дальще я могу выполнять какую то логику но важно понимать что
  //код не сработает пока не отработает await пока не получу результат его работы resolve
  //а он отработает с задержкой в 3 сек именно в это заключается смысл await
  //что бы в await отловить ощибку весь код надо обернуть в значение try
  //а потом если в try поймал ошибку автоматом срабатывает catch
async function fetchAsyncTodos () {
  console.log('async начала отрабатывать и ждёт данных с сервера после искуственной задержки')
  await delay(5000)
  fetch(testUrl)
  try {
  const response = await fetch(testUrl)
  const data = await response.json()
  console.log('async отработал после искуственной задержки данные с сервера получены, Data: ', data);
  } catch (err) {console.log('отловил ошибку:', err)}
}
//что бы код отработал функцию fetchAsyncTodos надо вызвать
fetchAsyncTodos()